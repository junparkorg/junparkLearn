name: App_service

on:
  # Trigger the workflow on push or pull request,
  ## but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  repository_dispatch:
    types: [run_my_workflow]

env:
  resourceGroupName: appservicekorea
  acrName: jpWebGithubacr
  appserviceName: jpWebGithub
  COMMIT_REF: $(git rev-parse --short "$GITHUB_SHA")
  GITHUB_FEED: https://nuget.pkg.github.com/junparkorg/junparkLearn/
  GITHUB_USER: junpark12
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


jobs:
  Build-Test:
    runs-on: ubuntu-latest
    env:
      DOTNET_NOLOGO: true

    strategy:
      matrix:
        dotnet-version: ['6.0.x' ]

    steps:
      - run: echo "Payload ${{ github.event.client_payload.mydata }}"
      - run: echo "event---${{ github.event_name }} branch---${{ github.ref }}"
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      
      - name: Restore
        run: dotnet restore
#        working-directory: ./WebApp

      - name: Build
        run: dotnet build --configuration Release --no-restore
#        working-directory: ./WebApp
    
      - name: Test
        run: dotnet test --no-restore --verbosity normal

      - name: dotnet publish
        run: dotnet publish -c Release -o ./publish
        working-directory: ./App6

      - name: upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: .net-app
          path: ./App6
      

  ARM-Deploy:
    uses: junparkorg/junparkLearn/.github/workflows/Armdeploy.yml@main
    if: contains(github.event.pull_request.labels.*.name, 'armupdate')
    with:
      env_name: 'dev'
      rg_name: 'appservicekorea'

    secrets:
      az_clidential: ${{ secrets.AZURE_CREDENTIALS }}
      subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
    

  Deploy-App:
    uses: junparkorg/junparkLearn/.github/workflows/Appdeploy.yml@main
    if: ${{ always() }}
    needs: [Build-Test,ARM-Deploy]
    with:
      env_name: 'dev'
      rg_name: 'appservicekorea'
      acr_name: 'jpWebGithubacr'
      img_tag: $(git rev-parse --short "$GITHUB_SHA")
      appsvc_name: 'jpWebGithub'

    secrets:
      az_clidential: ${{ secrets.AZURE_CREDENTIALS }}
      reg_username: ${{ secrets.REGISTRY_USERNAME }}
      reg_password: ${{ secrets.REGISTRY_PASSWORD }}
    #runs-on: 'ubuntu-latest'
    #environment: 'dev'
    #if: ${{ always() }}
    #needs: [Build-Test,ARM-Deploy]
    #steps:
    #  #login to azure
    #  - uses: actions/checkout@v2
    #  - name: Login to Azure
    #    uses: azure/login@v1
    #    with:
    #        creds: ${{ secrets.AZURE_CREDENTIALS }}
    #  - name: Build image with ACR
    #    id: buildimg
    #    run: |
    #        az acr build --registry ${{ env.acrName }} --image aspnet6webapp:${{ env.COMMIT_REF }} ./App6/
    #        az acr import --name ${{ env.acrName }} --source ${{ env.acrName }}.azurecr.io/aspnet6webapp:${{ env.COMMIT_REF }} --image aspnet6webapp:latest --force
            
    #  #scan image
    #  - uses: azure/container-scan@v0
    #    id: scan_image
    #    with:
    #      image-name: ${{ env.acrName }}.azurecr.io/aspnet6webapp:latest
    #      username: ${{ secrets.REGISTRY_USERNAME }}
    #      password: ${{ secrets.REGISTRY_PASSWORD }}

    #  - name: Deploy the image to App Service
    #    run: |
    #        az webapp config container set --name ${{ env.appserviceName }} --resource-group ${{ env.resourceGroupName }} --docker-custom-image-name "${{ env.acrName }}.azurecr.io/aspnet6webapp:${{ env.COMMIT_REF }}" --docker-registry-server-user ${{ secrets.REGISTRY_USERNAME }} --docker-registry-server-password ${{ secrets.REGISTRY_PASSWORD }}

    #  - name: Azure CLI script
    #    uses: azure/CLI@v1
    #    with:
    #      azcliversion: 2.0.72
    #      inlineScript: |
    #          az logout
    #          az cache purge
    #          az account clear     


  Deploy-Prod:
    runs-on: 'ubuntu-latest'
    environment: 'prod'
    needs: [Deploy-App]
    if: always() && needs.Deploy-Dev.result == 'success'
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}